;; -*- mode: Lisp; -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Explorations of hardware representations of value types and tagged
;; pointer types. Derived initially from C0 compiler, but modified heavily
;; for the C1 compiler. This is initially for a 64-bit architecture.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; An aligned 8-byte contiguous hardware value is a called a "cell".

;; TODO: Explicitly look to see if 16 or 8 byte alignment is needed when using
;; this tagging system.

;; ;;;;
;; Narrow Tags (64-bit architecture)
;; ;;;;

;; Fixnum:          | 63-bit fixnum  | XXX0
;; Cons Cell        | 60-bit address | 0001
;; Closure:         | 60-bit address | 0011
;; UNUSED:          | 60-bit address | 0101 TODO: Broken Heart
;; Symbol:          | 60-bit address | 0111
;; Array:           | 60-bit address | 1001 (full of same type immediate)
;; TaggedArray:     | 60-bit address | 1011 (full of tagged pointers only)
;;
;; OtherImm tag:    | <whatever>     | 1101
;; Wide tag:        | <whatever>     | 1111

;; ;;;;
;; Other immediates
;; ;;;;

;; UTF-8 char:    | 24 x 0 | 32-bits UTF-8 | 0000 | OtherImm Tag (left justi.)
;; False:         | 56 x 0                 | 0010 | OtherImm Tag
;; True:          | 56 x 0                 | 0011 | OtherImm Tag
;; Empty List:    | 56 x 0                 | 0100 | OtherImm Tag
;; eof:           | 56 x 0                 | 0101 | OtherImm Tag
;; void:          | 56 x 0                 | 0110 | OtherImm Tag
;; unbound:       | 56 x 0                 | 0111 | OtherImm Tag

;; ;;;;
;; Wide Tags
;; ;;;;

;; Executable Code: | 56 x 0 | 0000 | Wide Tag
;; Stack:           | 56 x 0 | 0001 | Wide Tag
;; Symbol Table:    | 56 x 0 | 0010 | Wide Tag
;; Hash Table:      | 56 x 0 | 0011 | Wide Tag
;; Bignum:          | 56 x 0 | 0100 | Wide Tag
;; Rational:        | 56 x 0 | 0101 | Wide Tag
;; Complex:         | 56 x 0 | 0110 | Wide Tag
;;
;; TODO: Add more, such as, single-floats and double-floats (eeewww figure that
;; out), boxed types whose storage is ALWAYS headerless, etc, etc, etc



;; ;;;;
;; Explicit examples of value type
;; ;;;;


;; Fixnum: Tag #b0
;; ===============
;; This is not a pointer, but an immediate representation of an integer.
;;
;; We choose this specific tag to make math operations like addition work out
;; on the tagged representation itself.
;;
;; Range: (1- (expt 2 -63)) to (expt 2 63)
;; (defparameter +word-size* 8) ;; bytes
;; (defparameter +fx-shift+ 1);; bits
;; (defun fixnum-bits () (- (* +word-size+ 8) +fx-shift+))
;; (defun fxlower () (- (expt 2 (- (fixnum-bits) 1))))
;; (defun fxupper () (1- (expt 2 (- (fixnum-bits) 1))))
;;
;; To convert a hardware integer to a fixnum, shift left 1 bit.
;; To convert a fixnum to a hardware integer, shift right 1 bit.
;; If it overflows during the shift, convert to bignum.
;; If a bignum is shifted right and fits into a fixnum, convert to fixnum.
;;
;; Example odd number, integer -> fixnum:
;;  Convert: 0x3039
;;  Arithmetic Shift left 1 bit: 0x6072
;;  Right most bit is already 0.
;; Example odd number, fixnum -> integer:
;;  Convert: 0x6072
;;  Arithmetic Shift Right 1 bit: 0x3039
;;  Left most bit is sign extended.
;;
;; Example even number, integer -> fixnum:
;;  Convert: 0x7678
;;  Arithmetic Shift Left 1 bit: 0xecf0
;;  Right most bit is already 0.
;; Example even number, fixnum -> integer:
;;  Convert: 0xecf0
;;  Arithmetic Shift Right 1 bit: 0x7678
;;  Left more bit is sign extended.
;;
;; If the left shift of an integer causes an overflow of a fixnum, the number
;; must be promoted to a bignum.
;;
;; Addition and subtraction can be done directly in the tagged representation.
;;
;; Multiplication of A * B (both fixnums) are done like this to maximize
;; available representation range: C = A / 2 * B
;; as opposed to this: C = (A * B) / 2
;;
;; Division cancels the shift factor, so shift back into fixnum when completed.
;;
;; Shifts, & other logical bit operations have to be carefully done to not
;; destroy the tag value (NOT comes to mind).


;; cons cell: Tag #b0001
;; =====================
;;
;; It consists of two adjacent cells whose car is aligned on 16 byte boundary.
;; Example cons cell in memory:
;;  address of a car: 0x0011223344556670
;;  address of a cdr: 0x0011223344556678
;; Tagged ptr to above cell: 0x0011223344556671
;;
;; So, if %eax holds 0x0011223344556671, then
;; movq -1(%eax), %ebx ; moves the car into the %ebx register,
;; movq  7(%eax), %edx ; moves the cdr into the %edx register


;; closure: Tag #b0011
;; ===================
;;
;; A closure is a function pointer and a set of associations between closed
;; environment variables and values that get used when the closure is passed to
;; the function it was created to serve. Mutable variables must get their own
;; memory cell to hold the value and multiple closures may reference this
;; single cell. Closures can be as simple as associating an index value
;; (representing a closed lexical variable) with a memory cell holding that
;; value.  They can be as complex as modeling OOP behavior. There are an
;; infinite number of was to represent a closure, and some are better than
;; others.
;;
;; While it is customary in pedagocial literature to represent the environment
;; as the same vector type as a vector, we won't do that here. We build a
;; specific protocol to access the closure and the layout of the closure is
;; initially very simple. In this model, the storage of the environment looks
;; like a vector, but it doesn't have to be.
;;
;; In our closure model, we associate an index with a lexical variable's value.
;; We use that index like an array lookup to get the memory cell we've stored
;; the value in.
;;
;; TODO: The start of a closure must be aligned on a 16 byte boundary.
;; Example of a closure in memory:
;;  address of pointer to executable code: 0x0011223344556670
;;  address of zeroth closed value:        0x0011223344556678
;;  address of first closed value:         0x0011223344556680
;;  address of Nth closed value:           0x0011223344556670 + 8 + (N * 8)
;; Tagged pointer to closure: 0x0011223344556673
;;
;; So, if %eax holds 0x0011223344556673, then
;; movq -3(%eax), %ebx ; moves function cell contents into %ebx
;; leaq  5(%eax), %edx ; computes address of zeroth value in closure into %edx
;; Then, if index to look up is in %ecx, we:
;;   base + index*scale + displacement
;;   movq 5(%eax, %ecx, 8), %edx
;; which loads the contents of cell index located in %ecx into %edx.
